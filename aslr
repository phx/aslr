#!/bin/sh

file='/proc/sys/kernel/randomize_va_space'

get_value() { cat "$file"; }

# Alternate methods
# echo $1 | sudo tee $file
# sudo sh -c "echo $1 > $file"
filewrite() {
  if [ "$UID" != "0" ]; then
    sysctl -w kernel.randomize_va_space="$1" > /dev/null 2>&1;
  else
    sudo sysctl -w kernel.randomize_va_space="$1" > /dev/null 2>&1;
  fi
}

print_current_value() { echo; echo "${file}: $(get_value)"; }

aslr_off() {
  echo 'TURNING ASLR OFF...'
  echo
  echo '[-] virtual dynamic shared object (VDSO) page'
  echo '[-] shared memory regions'
  echo '[-] data segments'
  echo
  echo '(Disabled Randomization)'
  filewrite 0
}

aslr_on() {
  echo 'TURNING ASLR ON...'
  echo
  echo '[+] virtual dynamic shared object (VDSO) page'
  echo '[+] shared memory regions'
}

usage() {
echo '
USAGE: aslr [0|1|2]

0 - Disable Randomization
1 - Enable Conservative Randomization
2 - Enable Full Randomization

If run without parameters, the current value will be displayed.
'
exit
}

if ! sudo -v >/dev/null 2>&1; then
  if [ "$UID" != "0" ]; then
    echo "$LOGNAME must have sudo privileges to change ASLR values."
    echo
    print_current_value
    exit
  fi
fi

if [ -z "$1" ]; then
  print_current_value
  exit
elif echo "${@}" | grep -q 'h'; then
  usage
elif [ "$1" = "0" ] || [ "$1" = "off" ]; then
  aslr_off
elif [ "$1" = "1" ]; then
  aslr_on
  echo '[-] data segments'
  echo
  echo '(Conservative Randomization)'
  filewrite 1
elif [ "$1" = "2" ] || [ "$1" = "on" ]; then
  aslr_on
  echo '[+] data segments'
  echo
  echo '(Full Randomization)'
  filewrite 2
fi

print_current_value
